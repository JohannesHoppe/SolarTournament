var AzureMongoEndpoint = require('azureMongoEndpoints').AzureMongoEndpoint;
var mongoDb = require('mongodb').Db;
var mongoDbConnection = require('mongodb').Connection;
var mongoServer = require('mongodb').Server;
var bson = require('mongodb').BSONNative;
var objectID = require('mongodb').ObjectID;

var TaskProvider = function() {
  var self = this;

  // Create mongodb azure endpoint
  // TODO: Replace 'ReplicaSetRole' with your MongoDB role name (ReplicaSetRole is the default)
  var mongoEndpoints = new AzureMongoEndpoint('ReplicaSetRole', 'MongodPort');

  // Watch the endpoint for topologyChange events
  mongoEndpoints.on('topologyChange', function() {
    if (self.db) {
      self.db.close();
      self.db = null;
    }

    var mongoDbServerConfig = mongoEndpoints.getMongoDBServerConfig();
    self.db = new mongoDb('test', mongoDbServerConfig, {native_parser:false});
    self.db.open(function() {});
  });

  mongoEndpoints.on('error', function(error) {
    throw error;
  });
};

TaskProvider.prototype.getCollection = function(callback) {
  var self = this;

  var ensureMongoDbConnection = function(callback) {
    if (self.db.state !== 'connected') {
      self.db.open(function (error, client) {
        callback(error);
      });
    } else {
      callback(null);
    }
  }

  ensureMongoDbConnection(function(error) {
    if (error) {
      callback(error);
    } else {
      self.db.collection('task', function(error, task_collection) {
        if (error) {
          callback(error);
        } else {
          callback(null, task_collection);
        }
      });
    }
  });
};

TaskProvider.prototype.findAll = function(callback) {
  this.getCollection(function(error, task_collection) {
    if (error) {
      callback(error)
    } else {
      task_collection.find().toArray(function(error, results) {
        if (error) {
          callback(error)
        } else {
          callback(null, results)
        }
      });
    }
  });
};

TaskProvider.prototype.save = function(tasks, callback) {
  this.getCollection(function (error, task_collection) {
    if (error) {
      callback(error)
    } else {
      if (typeof (tasks.length) == "undefined") {
        tasks = [tasks];
      }

      for (var i = 0; i < tasks.length; i++) {
        task = tasks[i];
        task.created_at = new Date();
      }

      task_collection.insert(tasks, function (err) {
        callback(null, tasks);
      });
    }
  });
};

exports.TaskProvider = TaskProvider;