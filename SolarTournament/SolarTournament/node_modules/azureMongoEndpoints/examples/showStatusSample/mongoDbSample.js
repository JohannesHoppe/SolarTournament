/* Copyright 2010-2011 10gen Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

var http = require('http');
var AzureMongoEndpoint = require('azureMongoEndpoints').AzureMongoEndpoint;
var mongoDb = require('mongodb').Db;
var mongoClient;
var port = process.env.port || 1337;

http.createServer(function (req, res) {
  res.writeHead(200, { 'Content-Type': 'text/html' });
  if (req.url == '/') {
    getStatus(function(error, status) {
      if (error) {
        res.end('MongoDB error: ' + error.message);
      } else {
        var body = 'ReplicaSet Name: <b>' + status.set + '</b>(** Using replSetGetStatus command)<br/>';

        if (status.members) {
          status.members.forEach(function(member) {
            body += member.stateStr + ': ' + member.name + '<br/>';
          });
        }

        body += '\n';

        res.end(body);
      }
    });
  } else {
    res.end();
  }
}).listen(port);


// Create mongodb azure endpoint. 
// TODO: Replace 'ReplicaSetRole' with your MongoDB role name (ReplicaSetRole is the default)
var mongoEndpoints = new AzureMongoEndpoint('ReplicaSetRole', 'MongodPort');

// Watch the endpoint for topologyChange events
mongoEndpoints.on('topologyChange', function() {
  if (mongoClient) {
    mongoClient.close();
    mongoClient = null;
  }

  var mongoDbServerConfig = mongoEndpoints.getMongoDBServerConfig();
  mongoClient = new mongoDb('test', mongoDbServerConfig, {native_parser:false});
  mongoClient.open(function() {});
});

mongoEndpoints.on('error', function(error) {
  throw error;
});

function getStatus(callback) {
  ensureMongoDbConnection(function(error) {
    if (error) {
      callback(error, null);
    } else {
      mongoClient.executeDbAdminCommand({replSetGetStatus : 1}, function(error, status) {
        if (error) {
          callback(error, null);
        } else {
          callback(null, status.documents[0]);
        }
      });
    }
  });
}

function ensureMongoDbConnection(callback) {
  if (mongoClient.state !== 'connected') {
    mongoClient.open(function (error, client) {
      callback(error);
    });
  } else {
    callback(null);
  }
}

